// generated from rosidl_adapter/resource/msg.idl.em
// with input from audio_common_msgs/msg/SoundRequest.msg
// generated code does not contain a copyright notice


module audio_common_msgs {
  module msg {
    module SoundRequest_Constants {
      @verbatim (language="comment", text=
        "Sounds")
      const int8 BACKINGUP = 1;
      const int8 NEEDS_UNPLUGGING = 2;
      const int8 NEEDS_PLUGGING = 3;
      const int8 NEEDS_UNPLUGGING_BADLY = 4;
      const int8 NEEDS_PLUGGING_BADLY = 5;
      @verbatim (language="comment", text=
        "Sound identifiers that have special meaning" "\n"        "Only legal with PLAY_STOP")
      const int8 ALL = -1;
      const int8 PLAY_FILE = -2;
      const int8 SAY = -3;
      @verbatim (language="comment", text=
        "Commands" "\n"        "Stop this sound from playing")
      const int8 PLAY_STOP = 0;
      @verbatim (language="comment", text=
        "Play the sound once")
      const int8 PLAY_ONCE = 1;
      @verbatim (language="comment", text=
        "Play the sound in a loop until a stop request occurs")
      const int8 PLAY_START = 2;
    };
    @verbatim (language="comment", text=
      "IMPORTANT: You should never have to generate this message yourself." "\n"
      "Use the sound_play::SoundClient C++ helper or the" "\n"
      "sound_play.libsoundplay.SoundClient Python helper.")
    struct SoundRequest {
      @verbatim (language="comment", text=
        "Selects which sound to play (see above)")
      int8 sound;

      @verbatim (language="comment", text=
        "Indicates what to do with the sound")
      int8 command;

      @verbatim (language="comment", text=
        "Volume at which to play the sound, with 0 as mute and 1.0 as 100%.")
      float volume;

      @verbatim (language="comment", text=
        "file name or text to say")
      string arg;

      @verbatim (language="comment", text=
        "other arguments")
      string arg2;
    };
  };
};
